package StackImplement;/* * @author:Saawan * @created:[10/21/2020],Wednesday * Time:9:11 PM */public class ArrayStack<E>implements StackInter<E> {    private E[] element;    private int size;    public static final int INITIAL_CAPACITY=100;    public ArrayStack() {       element = (E[]) new Object[INITIAL_CAPACITY];    }    public ArrayStack(int capacity){        element=(E[]) new Object[capacity];    }    @Override    public boolean isEmpty() {        return (size==0);    }    @Override    public E peek() {        if (size==0){            throw  new java.util.EmptyStackException();        }        return element[size-1];    }    @Override    public E pop() {        if (size==0){            throw new java.util.EmptyStackException();        }        E elements=element[--size];        element[size]=null;        return elements;    }    @Override    public void push(E elements) {        if (size==element.length){            resize();        }        element[size++]=elements;    }    @Override    public int size() {        return size;    }    public void resize(){        assert  size==element.length;        Object[] a=new Object[2*size];        System.arraycopy(element,0,a,0,size);        element=(E[])a;    }}